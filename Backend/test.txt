from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_cors import CORS
import os

# Configuration de l'application Flask
BASE_DIR = os.path.abspath(os.path.dirname(__file__))

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{os.path.join(BASE_DIR, 'db.sqlite3')}"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialiser les extensions
db = SQLAlchemy()
bcrypt = Bcrypt(app)
CORS(app)

# Associer SQLAlchemy à l'application Flask
db.init_app(app)

# Modèles
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

    def __repr__(self):
        return f'<User {self.username}>'

# Routes
@app.route("/")
def home():
    return {"status": "Server is running successfully"}

@app.route('/test-db')
def test_db():
    try:
        users = User.query.all()
        return jsonify({'status': 'success', 'users': [user.username for user in users]})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 500

# Exécuter l'application
if __name__ == '__main__':
    with app.app_context():
        db.create_all()  # Création des tables dans la base de données
    app.run(debug=True)

